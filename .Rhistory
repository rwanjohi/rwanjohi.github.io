ui = dashboardPage(skin = 'green',
dashboardHeader(title = "Commerce Bank"),
dashboardSidebar( sidebarMenu(
menuItem("Descriptives", tabName = "descriptives", icon = icon("bar-chart")),
menuItem("Map", tabName = "widgets", icon =icon("map")),
menuItem("Table", tabName = "tabs", icon =icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'descriptives',
h2("Descriptive Analysis"),
fluidPage(
#titlePanel("Richards Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput("dataset", "Choose a variable:", choices = names(dataset)),
selectInput('x', 'X', names(dataset)[[2]], names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[3]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
#titlePanel("Richards Explorer 2"),
mainPanel(
verbatimTextOutput("summary"),
plotOutput('plot')
)
)
)
,
tabItem(tabName = "widgets",
h2("Mapping"),
fluidRow(
column(4, textInput("searchkw", label = "search:", value = "#dinner")),
column(4, textInput("lat", label = "latitude:", value = 39.75)), ##40.75
column(4, textInput("long", label = "longitude:", value = -94)),  ## 74
column(12, leafletOutput("myMap"))
#column(12, tableOutput('table'))
)
),
tabItem(tabName = "tabs",
h2("Data"),
fluidRow(
tableOutput("view")
)
)
)
)
)
shinyApp(ui, server)
runApp('C:/Users/Richard/Desktop/dashboard1.R')
runApp('C:/Users/Richard/Desktop/dashboard1.R')
data(quakes)
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
df.20 <- quakes[1:20,]
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag <= 4) {
"green"
} else if(mag <= 5) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
icon = 'flag',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
?awesomeIcons
icons <- awesomeIcons(
icon = 'flag',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
#icon = 'flag',
text = 'Commerce',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
#icon = 'flag',
text = 'RG',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
#icon = 'flag',
text = 'X',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
dim(quakes)
head(quakes)
rep(c('A', 'B', 'C'), 3)
clas = sample(rep(c('A', 'B', 'C'), 1000),1000, replace = TRUE)
df = cbind(quakes, clas)
head(df
)
str(df)
getColor <- function(df) {
sapply(quakes$clas, function(clas) {
if(clas = "A") {
"green"
} else if(clas = "B") {
"orange"
} else {
"red"
} })
}
getColor <- function(df) {
sapply(quakes$clas, function(clas) {
if(clas == "A") {
"green"
} else if(clas == "B") {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
#icon = 'flag',
text = 'X',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
library(twitteR)
library(ROAuth)
library(tidyverse)
library(text2vec)
library(caret)
library(glmnet)
library(ggrepel)
require(twitteR)
require(wordcloud)
require(igraph)
library(tm)
library(RTextTools)
library(e1071)
require(randomForest)
pos_tweets =  rbind(
c('I love commerce as my bank', 'positive'),
c('Their products are amazing', 'positive'),
c('Great doing business with Commerce!', 'positive'),
c('I am so excited about the website', 'positive'),
c('The customer service is friendly', 'positive'),
c("I love all Commerce bank's products", 'positive'),
c('The website is customer friendly', 'positive'),
c('The provide gateway, ooh is easy to use!', 'positive')
)
neg_tweets = rbind(
c('I do not like their credit card', 'negative'),
c('This view is horrible', 'negative'),
c('I hate their rates', 'negative'),
c('poor customer service', 'negative'),
c('stop stealing people houses', 'negative'),
c('looong queues! waiting time.. uuh!', 'negative')
)
neutral_tweets = rbind(
c('bought new car', 'neutral'),
c('goodnight good people', 'neutral'),
c('share jokes, commerce', 'neutral'),
c('I love my food', 'neutral')
)
test_tweets = rbind(
c('feel happy this morning', 'neutral'),
c('friendly customer service', 'positive'),
c('dont like that bank', 'negative'),
c('rates not that great', 'negative'),
c('I love the summer in KC, but I hate the winter', 'neutral'),
c('enjoying my dinner', 'neutral'),
c('way to go, Commerce! Great products', 'positive'),
c('we need you here, Commerce!', 'positive')
)
tweets = rbind(pos_tweets, neg_tweets, neutral_tweets, test_tweets)
matrix= create_matrix(tweets[,1], language="english",
removeStopwords= TRUE, removeNumbers=TRUE,
stemWords=FALSE)
library(RTextTools)
install.packages("RTetxtTools",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
update.packages()
library(RTextTools)
install.packages("RTetxtTools",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
setRepositories()
lat = c(39, 39.5, 39.9, 38, 36, 41, 38.4, 39.2, 40, 37, 37, 39.2, 44, 39, 39.5, 42, 39.6, 33, 39.7, 37, 34,
39.4, 40, 36.4, 51.51, -1.29)
lon = c(-94.5, -98, -96, -94.8, -99, -94.9, -95.1, -94.8, -96.2, -95, -96.1, -94.9, -94.8, -95, -96,
-94.8, -95.3, -94.58, -95.3, -96, -90, -94.2, -97, -95.2, -0.128, 36.8)
names = paste(sample(LETTERS[1:5], nrow(tweets), replace = TRUE), sample(LETTERS[6:10], nrow(tweets), replace = TRUE), sep = '')
df = as.data.frame(cbind(names, lat, lon, tweets))
colnames(df) = c('user','lat', 'lon', 'text', 'class')
str(df)
df$user = as.character(df$user)
df$lat = as.numeric(as.character(df$lat))
df$lon = as.numeric(as.character(df$lon))
head(df)
summary(df)
write.csv(df, file = 'C:/Users/Richard/Desktop/tweets.csv', row.names = FALSE)
library(shiny); runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks2.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
library(shiny); runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
library(shiny); runApp('C:/Users/Richard/Desktop/Hacks3.R')
library(shiny); runApp('E:/Hacks4s.R')
install.packages("ggplot2")
library(rsconnect)
library(ggplot2)
require(glmnet)
library(plotly)
runApp('E:/Hacks4s.R')
install.packages("viridis")
remove.packages('plotly')
remove.packages('plotly')
library(plotly)
remove.packages('plotly')
remove.packages(plotly)
devtools::install_github("ropensci/plotly")
library(ggplot2)
library(rsconnect)
library(ggplot2)
remove.packages('plotly')
library(shiny)
library(shinydashboard)
library(leaflet)
library(twitteR)
library(tm)
library(RTextTools)
library(e1071)
library(wordcloud)
library(Rgraphviz)
require(randomForest)
require(glmnet)
library(plotly)
library(ggplot2)
remove.packages('ggplot2')
remove.packages('ggplot2')
install.packages("ggplot2")
runApp('E:/Hacks4s.R')
library(blogdown)
?wd
getwd
getwd()
library(keras)
df2 <-dataset_mnist()
df = read.table('E:/shampoo.csv', sep = ',', header = TRUE, na.strings = 'NULL')
dim(df)
names(df)
head(df)
summary(df)
df$Month <- as.Date(df$Month, format = '%m-%d')
head(df)
plot(df, type = 'l')
Series = df$X
diffed = diff(Series, differences = 1)
lags <- function(x, k){
lagged =  c(rep(NA, k), x[1:(length(x)-k)])
DF = as.data.frame(cbind(lagged, x))
colnames(DF) <- c( paste0('x-', k), 'x')
return(DF)
}
supervised = lags(diffed, 1)
N = nrow(df)
supervised
supervised = lags(Series, 1)
lags <- function(x, k = 1){
lagged =  c(rep(NA, k), x[1:(length(x)-k)])
DF = as.data.frame(cbind(lagged, x))
colnames(DF) <- c( paste0('x-', k), 'x')
return(DF)
}
supervised = lags(Series, 1)
lagged = c(rep(NA, 1), Series[1:(length(Series)- 1)])
lagged
Series
Series = df$Sales
diffed = diff(Series, differences = 1)
lags <- function(x, k = 1){
lagged =  c(rep(NA, k), x[1:(length(x)-k)])
DF = as.data.frame(cbind(lagged, x))
colnames(DF) <- c( paste0('x-', k), 'x')
return(DF)
}
supervised = lags(diffed, 1)
supervised
lags <- function(x, k = 1){
lagged =  c(rep(NA, k), x[1:(length(x)-k)])
DF = as.data.frame(cbind(lagged, x))
colnames(DF) <- c( paste0('x-', k), 'x')
DF[is.na(DF)] <- 0
return(DF)
}
supervised = lags(diffed, 1)
supervised
lags(diffed, 2)
supervised = lags(diffed, 1)
N = nrow(df)
n = round(N *0.66, digits = 0)
train = supervised[1:n, ]
test  = supervised[n:N,  ]
y_train = train[, 2]
x_train = train[, 1]
y_test = test[, 2]
x_test = test[, 1]
normalize <- function(x, feature_range = c(0, 1)) {
stdz = ((x - min(x)) / (max(x) - min(x)))
mins = feature_range[1]
maxs = feature_range[2]
scaledz = stdz *(maxs -mins) + mins
return (scaledz)
}
normalize(Series, c(-1, 1))
normalize(diffed)
normalize(diffed, c(-1, 1))
nt = length(x_test)
preds = numeric(nt)
for (i in 1:nt){
yhat = persist_Model(x_test[i])
preds[i] <- yhat
}
persist_Model = function(x){
return(x)
}
nt = length(x_test)
preds = numeric(nt)
for (i in 1:nt){
yhat = persist_Model(x_test[i])
preds[i] <- yhat
}
ymax = max(X.values[, 2])
ymax = max(df[, 2])
plot(y_train, lty = 1, col = 4, type = 'b', lwd = 2,  ylab = '', xlim = c(0, N), ylim = c(0, ymax), main = 'Persistent Model')
ymax
plot(y_train, lty = 1, col = 4, type = 'b', lwd = 2,  ylab = '', xlim = c(0, N), ylim = c(0, ymax), main = 'Persistent Model')
plot(y_train, lty = 1, col = 4, type = 'b', lwd = 2,  ylab = '', xlim = c(0, N), ylim = c(-20, ymax), main = 'Persistent Model')
plot(y_train, lty = 1, col = 4, type = 'b', lwd = 2,  ylab = '', xlim = c(0, N), ylim = c(-20, ymax), main = 'Persistent Model')
plot(y_train, lty = 1, col = 4, type = 'b', lwd = 2,  ylab = '', xlim = c(0, N), ylim = c(-20, ymax), main = 'Persistent Model')
plot(y_train, lty = 1, col = 4, type = 'b', lwd = 2,  ylab = '', xlim = c(0, N), ylim = c(-200, ymax), main = 'Persistent Model')
myNA = rep(NA, length(y_train))
ytests  = c(myNA, y_test)
ypreds   = c(myNA, preds)
lines( ytests,col=2,lwd=2)
lines(ypreds, col = 3, lwd = 2)
legend('bottomright', legend = c('train', 'test', 'prediction'), col = c(4, 2, 3), lwd= 2, cex = 0.7)
(rmse = sqrt(mean((y_test - preds)^2)))
inverse_diff = function(history, diffed, interval = 1){
n = length(history)
inverted_dfs = numeric(n)
for (i in n: 1){
yy = diffed[i] + history[i]
inverted_dfs[i] <- yy
}
return (inverted_dfs)
}
inverse_diff(Series, diffed, 1)
library(keras)
model <- keras_model_sequential()
model %>%
layer_dense(units = 784, input_shape = 784) %>%
layer_dropout(rate=0.4)%>%
layer_activation(activation = 'relu') %>%
layer_dense(units = 10) %>%
layer_activation(activation = 'softmax')
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = 'adam',
metrics = c('accuracy')
)
summary(model)
N <- 10000
trial <- function(){
sum(sample(c(0,1),7,replace=T, prob = c(2, 4))) > 3
}
probs = numeric(N)
for (i in 1:N){
probs[i] = (sum(replicate(i, trial()))/i)
}
abline(h = 4/6, col = 2)
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
library(reticulate)
rmarkdown::render_site()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
library(reticulate)
?import
import(pandas)
import(numpy)
import pandas
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
rmarkdown::render_site()
getwd()
