library(shiny)
library(shinydashboard)
library(streamR)
load("C:/Users/Richard/Desktop/my_oauth.Rdata")
searchTwitter('#ElectionKE', geocode = '-1.29, 36.82, 10km', n = 100)
filterStream(file.name = "C:/Users/Richard/Desktop/tweetN.json", # Save tweets in a json file
track = c( '#ncaa'), # Collect tweets mentioning either Affordable Care Act, ACA, or Obamacare
language = "en",
location = c(-95, 37, -93, 39.5), # latitude/longitude pairs providing southwest and northeast corners of the bounding box.
timeout = 10, # Keep connection alive for 60 seconds
oauth = my_oauth) # Use my_oauth file as the OAuth credentials
filterStream(file.name = "C:/Users/Richard/Desktop/tweetN.json", # Save tweets in a json file
track = c( '#ncaa'), # Collect tweets mentioning either Affordable Care Act, ACA, or Obamacare
language = "en",
location = c(-95, 37, -93, 39.5), # latitude/longitude pairs providing southwest and northeast corners of the bounding box.
timeout = 10, # Keep connection alive for 60 seconds
oauth = my_oauth) # Use my_oauth file as the OAuth credentials
tweets <- parseTweets("C:/Users/Richard/Desktop/tweetN.json", simplify = FALSE) # parse the json file and save to a data frame called tweets.df.
filterStream(file.name = "C:/Users/Richard/Desktop/tweetN.json", # Save tweets in a json file
track = c( '#ncaa'), # Collect tweets mentioning either Affordable Care Act, ACA, or Obamacare
language = "en",
location = c(-95, 37, -93, 39.5), # latitude/longitude pairs providing southwest and northeast corners of the bounding box.
timeout = 10, # Keep connection alive for 60 seconds
oauth = my_oauth) # Use my_oauth file as the OAuth credentials
tweets <- parseTweets("C:/Users/Richard/Desktop/tweetN.json", simplify = FALSE) # parse the json file and save to a data frame called tweets.df.
cbind(tweets.df$screen_name, tweets.df$user_lang, tweets.df$lat, tweets.df$location, tweets.df$name, tweets.df$lon, tweets.df$full_name, tweets.df$text )
tweets[, c('screen_name', 'user_lang', 'lat', 'lon', 'created_at')]
install.packages("h2o")
library(h2o)
install.packages("data.table")
library(data.table)
install.packages("gmodels")
source("http://scg.sdsu.edu/wp-content/uploads/2013/09/dataprep.r")
library(randomForest)
library(ROCR)
library(nnet)
library(rpart)
library(e1071)
train = data$train
test = data$val
Cleaned = rbind(train, test)
dim(Cleaned)
str(train)
str(test)
train[, prop.table(table(age))]
train[, prop.table(table(train$age))]
train[, prop.table(table(train$sex))]
dim(train)
train[, prop.table(table(train$age))]train$age
attach(train)
train[, prop.table(table(age))]
library(ggplot2)
str(train)
ggplot(train, aes(age, fill = sex)) + geom_bar()
train[, prop.table(table(sex))]
?prop.table()
table(sex)
prop.table(table(sex))
prop.table(table(age))
colSums(is.na(train))
str(train)
ggplot(train, aes(race, fill = sex)) + geom_bar()
ggplot(train, aes(country, fill = race)) + geom_bar()
ggplot(train, aes(race, fill = country)) + geom_bar()
library(gmodels)
CrossTable(race, sex)
?CrossTable
CrossTable(race, sex, prop.r = FALSE, prop.t prop.t = FALSE, prop.c = FALSE )
CrossTable(race, sex, prop.r = FALSE,  prop.t = FALSE, prop.c = FALSE )
localH2O <- h2o.init(nthreads = -1)
h2o.init()
train.h2o <- as.h2o(train)
library(mlbench)
install.packages("mlbench")
library(mlbench)
dat = BreastCancer[,-1] #reading in data set from mlbench package
data("BreastCancer")
dat = BreastCancer[,-1] #reading in data set from mlbench package
library(h2o)
localH2O <- h2o.init(ip = "localhost", port = 54321, startH2O = TRUE)
library("devtools", lib.loc="~/R/win-library/3.3")
devtools::install_github("rstudio/keras")
library(keras)
remove.packages('Rcpp')
Sys.getenv("R_LIBS_USER")
p_unlock()
options(install.lock=T)
options(install.lock=T)
utils:::menuInstallLocal()
devtools::install_github("rstudio/keras")
p_unlock()
install.packages("pacman")
p_unlock()
install.packages("pacman")
p_unlock()
library(pacman)
p_unlock()
Sys.getenv("R_LIBS_USER")
library(shiny); runApp('C:/Users/Richard/Desktop/dashboard1.R')
library(rsconnect)
library(ggplot2)
library(shiny)
library(shinydashboard)
adults = read.csv('C:/Users/Richard/Desktop/adults.csv')
library(plyr)
server = function(input, output) {
dataset <- reactive({
adults[sample(nrow(adults), input$sampleSize),]
})
output$plot <- renderPlot({
#
# p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
p <- ggplot(dataset(), aes_string(input$x)) +  # geom_point()
geom_bar()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height = 400)
mapTweets <- reactive(
{
map = leaflet() %>% addTiles() %>% addProviderTiles("Stamen.TonerHybrid") %>%    ##CartoDB.Positron, Stamen.TonerHybrid
setView(lng = input$long, lat = input$lat, zoom = 7) %>%
addMarkers(as.numeric(input$long), as.numeric(input$lat), popup = 'Me too' ) %>%
addPopups( as.numeric(input$long) , as.numeric(input$lat), popup = "Hello Commerce!")# %>%
#addCircles(lng = ~long, lat=  ~lat , fillColor = pal(runif(10)), popup = "Hello world!")
}
)
output$myMap = renderLeaflet(mapTweets())
# Return the requested dataset
# datasetInput <- reactive({
#   switch(input$dataset,
#          "rock" = rock,
#          "pressure" = pressure,
#          "cars" = cars)
# })
## generate a summary of dataset
output$summary <- renderPrint({
#dataset <- datasetInput()
summary(dataset()[, 1:4])
})
# output$summary <- summary(dataset[, 1:4])
output$view <- renderTable({
dataset()
})
}
dataset <- adults
ui = dashboardPage(skin = 'green',
dashboardHeader(title = "Commerce Bank"),
dashboardSidebar( sidebarMenu(
menuItem("Descriptives", tabName = "descriptives", icon = icon("bar-chart")),
menuItem("Map", tabName = "widgets", icon =icon("map")),
menuItem("Table", tabName = "tabs", icon =icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'descriptives',
h2("Descriptive Analysis"),
fluidPage(
#titlePanel("Richards Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput("dataset", "Choose a variable:", choices = names(dataset)),
selectInput('x', 'X', names(dataset)[[2]], names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[3]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
#titlePanel("Richards Explorer 2"),
mainPanel(
verbatimTextOutput("summary"),
plotOutput('plot')
)
)
)
,
tabItem(tabName = "widgets",
h2("Mapping"),
fluidRow(
column(4, textInput("searchkw", label = "search:", value = "#dinner")),
column(4, textInput("lat", label = "latitude:", value = 39.75)), ##40.75
column(4, textInput("long", label = "longitude:", value = -94)),  ## 74
column(12, leafletOutput("myMap"))
#column(12, tableOutput('table'))
)
),
tabItem(tabName = "tabs",
h2("Data"),
fluidRow(
tableOutput("view")
)
)
)
)
)
shinyApp(ui, server)
runApp('C:/Users/Richard/Desktop/dashboard1.R')
runApp('C:/Users/Richard/Desktop/dashboard1.R')
data(quakes)
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
df.20 <- quakes[1:20,]
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag <= 4) {
"green"
} else if(mag <= 5) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
icon = 'flag',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
?awesomeIcons
icons <- awesomeIcons(
icon = 'flag',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
#icon = 'flag',
text = 'Commerce',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
#icon = 'flag',
text = 'RG',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
icons <- awesomeIcons(
#icon = 'flag',
text = 'X',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
dim(quakes)
head(quakes)
rep(c('A', 'B', 'C'), 3)
clas = sample(rep(c('A', 'B', 'C'), 1000),1000, replace = TRUE)
df = cbind(quakes, clas)
head(df
)
str(df)
getColor <- function(df) {
sapply(quakes$clas, function(clas) {
if(clas = "A") {
"green"
} else if(clas = "B") {
"orange"
} else {
"red"
} })
}
getColor <- function(df) {
sapply(quakes$clas, function(clas) {
if(clas == "A") {
"green"
} else if(clas == "B") {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
#icon = 'flag',
text = 'X',
iconColor = 'black',
library = 'glyphicon',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
library(twitteR)
library(ROAuth)
library(tidyverse)
library(text2vec)
library(caret)
library(glmnet)
library(ggrepel)
require(twitteR)
require(wordcloud)
require(igraph)
library(tm)
library(RTextTools)
library(e1071)
require(randomForest)
pos_tweets =  rbind(
c('I love commerce as my bank', 'positive'),
c('Their products are amazing', 'positive'),
c('Great doing business with Commerce!', 'positive'),
c('I am so excited about the website', 'positive'),
c('The customer service is friendly', 'positive'),
c("I love all Commerce bank's products", 'positive'),
c('The website is customer friendly', 'positive'),
c('The provide gateway, ooh is easy to use!', 'positive')
)
neg_tweets = rbind(
c('I do not like their credit card', 'negative'),
c('This view is horrible', 'negative'),
c('I hate their rates', 'negative'),
c('poor customer service', 'negative'),
c('stop stealing people houses', 'negative'),
c('looong queues! waiting time.. uuh!', 'negative')
)
neutral_tweets = rbind(
c('bought new car', 'neutral'),
c('goodnight good people', 'neutral'),
c('share jokes, commerce', 'neutral'),
c('I love my food', 'neutral')
)
test_tweets = rbind(
c('feel happy this morning', 'neutral'),
c('friendly customer service', 'positive'),
c('dont like that bank', 'negative'),
c('rates not that great', 'negative'),
c('I love the summer in KC, but I hate the winter', 'neutral'),
c('enjoying my dinner', 'neutral'),
c('way to go, Commerce! Great products', 'positive'),
c('we need you here, Commerce!', 'positive')
)
tweets = rbind(pos_tweets, neg_tweets, neutral_tweets, test_tweets)
matrix= create_matrix(tweets[,1], language="english",
removeStopwords= TRUE, removeNumbers=TRUE,
stemWords=FALSE)
library(RTextTools)
install.packages("RTetxtTools",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
update.packages()
library(RTextTools)
install.packages("RTetxtTools",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
setRepositories()
lat = c(39, 39.5, 39.9, 38, 36, 41, 38.4, 39.2, 40, 37, 37, 39.2, 44, 39, 39.5, 42, 39.6, 33, 39.7, 37, 34,
39.4, 40, 36.4, 51.51, -1.29)
lon = c(-94.5, -98, -96, -94.8, -99, -94.9, -95.1, -94.8, -96.2, -95, -96.1, -94.9, -94.8, -95, -96,
-94.8, -95.3, -94.58, -95.3, -96, -90, -94.2, -97, -95.2, -0.128, 36.8)
names = paste(sample(LETTERS[1:5], nrow(tweets), replace = TRUE), sample(LETTERS[6:10], nrow(tweets), replace = TRUE), sep = '')
df = as.data.frame(cbind(names, lat, lon, tweets))
colnames(df) = c('user','lat', 'lon', 'text', 'class')
str(df)
df$user = as.character(df$user)
df$lat = as.numeric(as.character(df$lat))
df$lon = as.numeric(as.character(df$lon))
head(df)
summary(df)
write.csv(df, file = 'C:/Users/Richard/Desktop/tweets.csv', row.names = FALSE)
library(shiny); runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks2.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
library(shiny); runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
runApp('C:/Users/Richard/Desktop/Hacks3.R')
library(shiny); runApp('C:/Users/Richard/Desktop/Hacks3.R')
library(shiny); runApp('E:/Hacks4s.R')
install.packages("ggplot2")
library(rsconnect)
library(ggplot2)
require(glmnet)
library(plotly)
runApp('E:/Hacks4s.R')
install.packages("viridis")
remove.packages('plotly')
remove.packages('plotly')
library(plotly)
remove.packages('plotly')
remove.packages(plotly)
devtools::install_github("ropensci/plotly")
library(ggplot2)
library(rsconnect)
library(ggplot2)
remove.packages('plotly')
library(shiny)
library(shinydashboard)
library(leaflet)
library(twitteR)
library(tm)
library(RTextTools)
library(e1071)
library(wordcloud)
library(Rgraphviz)
require(randomForest)
require(glmnet)
library(plotly)
library(ggplot2)
remove.packages('ggplot2')
remove.packages('ggplot2')
install.packages("ggplot2")
runApp('E:/Hacks4s.R')
library(blogdown)
?wd
getwd
getwd()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
rmarkdown::render_site()
blogdown:::new_post_addin()
setwd('C:/Users/Richard/blogs')
blogdown:::new_post_addin()
blogdown:::new_post_addin()
setwd('C:/Users/Richard/rwanjohi.github.io')
getwd()
rmarkdown::render_site()
serve_site()
blogdown:::serve_site()
setwd('C:/Users/Richard/blogs')
blogdown:::serve_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
STOP
stop
setwd('C:/Users/Richard/blogs')
rmarkdown::render_site()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
setwd('C:/Users/Richard/rwanjohi.github.io')
rmarkdown::render_site()
